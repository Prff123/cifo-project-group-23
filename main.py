from map_generator import create_map
from pacman import Individual, Population
from crossover import single_point_co, multi_point_co, uniform_co
from mutation import move_mutation, swap_mutation, inversion_mutation
from selection import fps, tournament_sel, boltzmann_selection, rank_based_selection


#Initialize a 12x12 map with 20 ghosts and 14 fruits. This way we can compare the models with the exactly same map.
map = [['p', 'g', 'f', '*', 'g', '*', 'g', '*', 'g', '*', '*', 'g'], ['*', '*', '*', '*', '*', '*', '*', 'f', '*', '*', '*', '*'], ['*', 'g', '*', '*', 'g', '*', '*', 'g', '*', '*', 'g', 'f'], ['f', '*', '*', '*', '*', '*', '*', '*', '*', '*', '*', 'f'], ['*', '*', 'g', '*', 'g', 'f', '*', '*', 'g', '*', '*', 'g'], ['g', '*', '*', '*', '*', 'f', '*', '*', '*', '*', '*', '*'], ['f', '*', '*', '*', 'g', '*', 'g', '*', '*', 'g', '*', 'g'], ['g', '*', 'g', '*', 'f', '*', '*', '*', '*', '*', 'f', '*'], ['*', '*', 'f', '*', '*', 'g', 'f', 'g', '*', '*', '*', 'g'], ['g', '*', '*', 'g', '*', '*', '*', '*', '*', 'g', '*', '*'], ['*', '*', '*', '*', '*', 'f', 'f', '*', '*', '*', '*', '*'], ['*', 'g', '*', '*', 'g', '*', 'g', '*', '*', '*', 'g', '*']]

#A new map with different parameters can be generated by uncommenting the line of code below.
# map = create_map(width=12, height=12, nr_ghosts=30, nr_fruits=14)

#Prints map
for row in map:
    print(row)

#Counts the number of points, fruits and ghosts in the map.
map_points = 0
map_ghosts = 0
map_fruits = 0
for row in map:
    for item in row:
        if item == "*":
            map_points += 1
        elif item == "f":
            map_fruits += 1
        elif item == "g":
            map_ghosts += 1

print("Nr_points:", map_points) #Prints number of points
print("Nr_fruits:", map_fruits) #Prints number of fruits
print("Nr_ghosts:", map_ghosts) #Prints number of ghosts
print("Global Optimum:",map_points*100 + map_fruits*1000) #Prints the global optimum (Maximum fitness possible for the map)

print()
print()
print()

while True:
    #Initializes Population
    pop = Population(size=500, generated_map=map, moves=500, stepback=False)

    #Evolves Population
    pop.evolve(gens=300, select=tournament_sel, mutate=inversion_mutation,
               crossover=uniform_co, mut_prob=0.1, xo_prob=0.9, elitism=True)

    print(pop.best_individual)
    if pop.best_individual.fitness < 20000:
        pop.best_individual.get_history()
        break


